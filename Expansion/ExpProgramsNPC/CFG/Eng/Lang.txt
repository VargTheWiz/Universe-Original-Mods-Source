FormInfo ^{
    br=<br>
}
Script ^{
    Mod_ExpProgramsNPC ^{
        ProgramsDistributionChances ^{
            Diplomat=7:4, DistressSignal:0, Shocker5300:50, GatrixMatrix:23, WCoder:18, SystemShutdown:6, AbsoluteWeapon:3
            EliteWarrior=15:4, DistressSignal:0, Shocker5300:40, GatrixMatrix:25, WCoder:25, SystemShutdown:8, AbsoluteWeapon:2
            FemRanger=40:7, DistressSignal:15, Shocker5300:15, GatrixMatrix:25, WCoder:25, SystemShutdown:12, AbsoluteWeapon:8
            Pirate=4:3, DistressSignal:55, Shocker5300:20, GatrixMatrix:10, WCoder:10, SystemShutdown:4, AbsoluteWeapon:1
            PirateCorvette=8:4, DistressSignal:55, Shocker5300:20, GatrixMatrix:10, WCoder:10, SystemShutdown:4, AbsoluteWeapon:1
            Ranger=30:5, DistressSignal:40, Shocker5300:20, GatrixMatrix:15, WCoder:15, SystemShutdown:7, AbsoluteWeapon:3
            RangerExplorer=30:5, DistressSignal:40, Shocker5300:20, GatrixMatrix:15, WCoder:15, SystemShutdown:7, AbsoluteWeapon:3
            RangerPirate=30:5, DistressSignal:40, Shocker5300:20, GatrixMatrix:15, WCoder:15, SystemShutdown:7, AbsoluteWeapon:3
            RangerPirateExplorer=30:5, DistressSignal:40, Shocker5300:20, GatrixMatrix:15, WCoder:15, SystemShutdown:7, AbsoluteWeapon:3
            ReadMe=Параметр ShipTypes отвечает за то, какие типы кораблей в принципе будут получать программы. Параметры с именами типов отвечают за перечень получаемых данным типом корабля программ. Первая цифра в параметре - это общий шанс получения данным кораблём инфошки применения программ, а также шанс пополнения запаса программ конкретного корабля, если число программ у него ещё не максимально. Цифра через двоеточие после первой - это максимальное число программ, которые могут единовременно находиться в наличии у корабля данного типа (плюс такое же число "Интеркомов"). Имя программы и число через двоеточие - это шанс получения кораблём конкретной программы в случае пополнения. При этом общая сумма шансов получения различных программ должна составлять 100%. Не забывайте также обновлять параметр Version в случае внесения любых изменений, иначе изменения не применятся на игровых сейвах.
            ShipTypes=Ranger,RangerExplorer,RangerPirate,RangerPirateExplorer,FemRanger,Warrior,EliteWarrior,Pirate,PirateCorvette,PirateFrigate,PirateGalleon,Diplomat,Smuggler
            Smuggler=7:3, DistressSignal:0, Shocker5300:60, GatrixMatrix:20, WCoder:17, SystemShutdown:3, AbsoluteWeapon:0
            Version=13.08.2021
            Warrior=8:3, DistressSignal:0, Shocker5300:40, GatrixMatrix:25, WCoder:25, SystemShutdown:8, AbsoluteWeapon:2
        }
    }
}
ShipInfo ^{
    AddInfo ^{
        CustomInfos ^{
            ProgramAbsoluteWeaponNPC ^{
                Description=Level zero command self-destruct. Cannot be resisted by dominators.
                Description=<clr><clrEnd>
                Description=Number of runs: <Data1>
                DescriptionRus=Приказ нулевого уровня на самоуничтожение. Доминаторы подчиняются беспрекословно.
                DescriptionRus=<clr><clrEnd>
                DescriptionRus=Количество запусков: <Data1> шт.
                Icon=3
                Name=Absolute weapon
                NameRus=Абсолютное оружие
                OnActCode ^{
                    01=dword cur_info = CurInfo();
                    02=dword cur_ship = ScriptItemActShip();
                    03=if(!ShipInNormalSpace(cur_ship)) exit;
                    04=if(!StarBattle(ShipStar(cur_ship))) exit;
                    05=int in_fear = ShipInFear(cur_ship);
                    06=if(ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3) > CurTurn()) exit;
                    07=dword target;
                    08=if(!in_fear) target = ShipGetBad(cur_ship);
                    09=else
                    10 ^{
                        01=if(!fun_init)
                        02 ^{
                            01=int fun_init = 1;
                            02=unknown ShipNearbyShips = ImportedFunction('UtilityFunctions', 'ShipNearbyShips');
                        }
                        03=target = ShipNearbyShips(cur_ship, 1, 0, 1, '', '');
                    }
                    11=if(!target) exit;
                    12=if(ShipTypeN(target)) exit;
                    13=if(ShipCustomFaction(target) != '') exit;
                    14=if(DomikProgrammDate(target)) exit;
                    15=if(!in_fear)
                    16 ^{
                        01=if(Rnd(1, 100) <= abs(HullDamage(target) - 100) - 65) exit;
                    }
                    17=else
                    18 ^{
                        01=if(Rnd(1, 100) <= HullDamage(cur_ship) + 10) exit;
                    }
                    19=int sub_type = ShipSubType(target);
                    20=if(!sub_type || (sub_type > 3 && sub_type != 6)) exit;
                    21=if(ShipScanerPower(cur_ship) <= ShipProtectability(target)) exit;
                    22=if(!in_fear)
                    23 ^{
                        01=if(Dist(cur_ship, target) > 350) exit;
                    }
                    24=else
                    25 ^{
                        01=if(Dist(cur_ship, target) > 350) exit;
                    }
                    26=DomikProgramm(target, 10);
                    27=if(ShipCustomShipInfoData(0, CurInfo(), 1) > 1)
                    28 ^{
                        01=ShipCustomShipInfoData(0, CurInfo(), 1, ShipCustomShipInfoData(0, CurInfo(), 1) - 1);
                    }
                    29=else
                    30 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramAbsoluteWeaponNPC');
                    }
                    31=if(ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) > 1)
                    32 ^{
                        01=ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) - 1);
                    }
                    33=else
                    34 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramIntercomNPC');
                    }
                    35=ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1, ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1) - 1);
                    36=if(!in_fear) ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 18);
                    37=else ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 6);
                    38=if(ShipInNormalSpace(Player()))
                    39 ^{
                        01=if(ShipStar(cur_ship) == ShipStar(Player()))
                        02 ^{
                            01=if(Dist(cur_ship, Player()) <= ShipRadarRange(Player()))
                            02 ^{
                                01=str text = ItemSubrace(ShipItems(target, 0));
                                02=if(text==0) text = 'Blazer';
                                03=else if(1 == text) text = 'Keller';
                                04=else text = 'Terron';
                                05=if(Rnd(0, 1)) text = text + '1';
                                06=str player_name = ShipName(Player());
                                07=SetName(Player(), '*#*NameReplace*#*');
                                08=text = Format(CT('ShipGreetings.Dominator.' + text), '*#*NameReplace*#*', ShipName(cur_ship), '255,240,100');
                                09=SetName(Player(), player_name);
                                10=str prog_name = CT('Programms.SelfDestruction.Name');
                                11=text = '<color=255,240,100>' + Name(cur_ship) + '</color>' + '-->' + '<color=255,240,100>' + Name(target) + '</color>' + CT('FormInfo.br') + '- ' + text + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammPlayer'), '<Name' + '>', prog_name, '255,240,100') + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammOk'), '<Name' + '>', prog_name, '255,240,100');
                                12=Ether(1, '', text, cur_ship, target);
                            }
                        }
                    }
                }
                OnActCodeTypes=t_OnStep
                OnActStepTypes=5
            }
            ProgramDistressSignalNPC ^{
                Description=Upon receiving a distress signal, the dominator will dump some of its equipment and weapons.
                Description=<clr><clrEnd>
                Description=Number of runs: <Data1>
                DescriptionRus=Получив аварийный сигнал, доминатор выбросит часть оборудования и оружия.
                DescriptionRus=<clr><clrEnd>
                DescriptionRus=Количество запусков: <Data1> шт.
                Icon=3
                Name=Distress signal
                NameRus=Аварийный сигнал
                OnActCode ^{
                    01=dword cur_info = CurInfo();
                    02=dword cur_ship = ScriptItemActShip();
                    03=if(!ShipInNormalSpace(cur_ship)) exit;
                    04=if(!StarBattle(ShipStar(cur_ship))) exit;
                    05=if(Rnd(1, 100) <= 60) exit;
                    06=if(ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3) > CurTurn()) exit;
                    07=if(ShipInFear(cur_ship)) exit;
                    08=dword target = ShipGetBad(cur_ship);
                    09=if(!target) exit;
                    10=if(ShipTypeN(target)) exit;
                    11=if(ShipCustomFaction(target) != '') exit;
                    12=if(DomikProgrammDate(target)) exit;
                    13=int sub_type = ShipSubType(target);
                    14=if(!sub_type || sub_type > 6) exit;
                    15=if(ShipScanerPower(cur_ship) <= ShipProtectability(target)) exit;
                    16=if(Dist(cur_ship, target) > 350) exit;
                    17=DomikProgramm(target, 6);
                    18=if(ShipCustomShipInfoData(0, CurInfo(), 1) > 1)
                    19 ^{
                        01=ShipCustomShipInfoData(0, CurInfo(), 1, ShipCustomShipInfoData(0, CurInfo(), 1) - 1);
                    }
                    20=else
                    21 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramDistressSignalNPC');
                    }
                    22=if(ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) > 1)
                    23 ^{
                        01=ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) - 1);
                    }
                    24=else
                    25 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramIntercomNPC');
                    }
                    26=ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1, ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1) - 1);
                    27=ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 10);
                    28=if(ShipInNormalSpace(Player()))
                    29 ^{
                        01=if(ShipStar(cur_ship) == ShipStar(Player()))
                        02 ^{
                            01=if(Dist(cur_ship, Player()) <= ShipRadarRange(Player()))
                            02 ^{
                                01=str text = ItemSubrace(ShipItems(target, 0));
                                02=if(text==0) text = 'Blazer';
                                03=else if(1 == text) text = 'Keller';
                                04=else text = 'Terron';
                                05=if(Rnd(0, 1)) text = text + '1';
                                06=str player_name = ShipName(Player());
                                07=SetName(Player(), '*#*NameReplace*#*');
                                08=text = Format(CT('ShipGreetings.Dominator.' + text), '*#*NameReplace*#*', ShipName(cur_ship), '255,240,100');
                                09=SetName(Player(), player_name);
                                10=str prog_name = CT('Programms.Shipwreck.Name');
                                11=text = '<color=255,240,100>' + Name(cur_ship) + '</color>' + '-->' + '<color=255,240,100>' + Name(target) + '</color>' + CT('FormInfo.br') + '- ' + text + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammPlayer'), '<Name' + '>', prog_name, '255,240,100') + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammOk'), '<Name' + '>', prog_name, '255,240,100');
                                12=Ether(1, '', text, cur_ship, target);
                            }
                        }
                    }
                }
                OnActCodeTypes=t_OnStep
                OnActStepTypes=5
            }
            ProgramGatrixMatrixNPC ^{
                Description=A giant matrix of chaotic data overloads the robot's electronic circuits with a torrent of information, forcing the target to fly and shoot aimlessly.
                Description=<clr><clrEnd>
                Description=Number of runs: <Data1>
                DescriptionRus=Огромная матрица беспорядочных данных перегружает электронные схемы робота потоком информации. Робот бессмысленно летает и стреляет наугад.
                DescriptionRus=<clr><clrEnd>
                DescriptionRus=Количество запусков: <Data1> шт.
                Icon=3
                Name=Gatrix matrix
                NameRus=Гатрикс матрица
                OnActCode ^{
                    01=dword cur_info = CurInfo();
                    02=dword cur_ship = ScriptItemActShip();
                    03=if(!ShipInNormalSpace(cur_ship)) exit;
                    04=if(!StarBattle(ShipStar(cur_ship))) exit;
                    05=int in_fear = ShipInFear(cur_ship);
                    06=if(ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3) > CurTurn()) exit;
                    07=dword target;
                    08=if(!in_fear) target = ShipGetBad(cur_ship);
                    09=else
                    10 ^{
                        01=if(!fun_init)
                        02 ^{
                            01=int fun_init = 1;
                            02=unknown ShipNearbyShips = ImportedFunction('UtilityFunctions', 'ShipNearbyShips');
                        }
                        03=target = ShipNearbyShips(cur_ship, 1, 0, 1, '', '');
                    }
                    11=if(!target) exit;
                    12=if(ShipTypeN(target)) exit;
                    13=if(ShipCustomFaction(target) != '') exit;
                    14=if(DomikProgrammDate(target)) exit;
                    15=if(!in_fear)
                    16 ^{
                        01=if(Rnd(1, 100) <= abs(HullDamage(target) - 100) - 33) exit;
                    }
                    17=else
                    18 ^{
                        01=if(Rnd(1, 100) <= HullDamage(cur_ship) + 25) exit;
                    }
                    19=int sub_type = ShipSubType(target);
                    20=if(!sub_type || sub_type > 6) exit;
                    21=if(ShipScanerPower(cur_ship) <= ShipProtectability(target)) exit;
                    22=if(!in_fear)
                    23 ^{
                        01=if(Dist(cur_ship, target) > 350) exit;
                    }
                    24=else
                    25 ^{
                        01=if(Dist(cur_ship, target) > 400) exit;
                    }
                    26=DomikProgramm(target, 8);
                    27=DomikProgrammDate(target, CurTurn()+23);
                    28=if(ShipCustomShipInfoData(0, CurInfo(), 1) > 1)
                    29 ^{
                        01=ShipCustomShipInfoData(0, CurInfo(), 1, ShipCustomShipInfoData(0, CurInfo(), 1) - 1);
                    }
                    30=else
                    31 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramGatrixMatrixNPC');
                    }
                    32=if(ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) > 1)
                    33 ^{
                        01=ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) - 1);
                    }
                    34=else
                    35 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramIntercomNPC');
                    }
                    36=ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1, ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1) - 1);
                    37=if(!in_fear) ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 10);
                    38=else ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 2);
                    39=if(ShipInNormalSpace(Player()))
                    40 ^{
                        01=if(ShipStar(cur_ship) == ShipStar(Player()))
                        02 ^{
                            01=if(Dist(cur_ship, Player()) <= ShipRadarRange(Player()))
                            02 ^{
                                01=str text = ItemSubrace(ShipItems(target, 0));
                                02=if(text==0) text = 'Blazer';
                                03=else if(1 == text) text = 'Keller';
                                04=else text = 'Terron';
                                05=if(Rnd(0, 1)) text = text + '1';
                                06=str player_name = ShipName(Player());
                                07=SetName(Player(), '*#*NameReplace*#*');
                                08=text = Format(CT('ShipGreetings.Dominator.' + text), '*#*NameReplace*#*', ShipName(cur_ship), '255,240,100');
                                09=SetName(Player(), player_name);
                                10=str prog_name = CT('Programms.Insanity.Name');
                                11=text = '<color=255,240,100>' + Name(cur_ship) + '</color>' + '-->' + '<color=255,240,100>' + Name(target) + '</color>' + CT('FormInfo.br') + '- ' + text + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammPlayer'), '<Name' + '>', prog_name, '255,240,100') + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammOk'), '<Name' + '>', prog_name, '255,240,100');
                                12=Ether(1, '', text, cur_ship, target);
                            }
                        }
                    }
                }
                OnActCodeTypes=t_OnStep
                OnActStepTypes=5
            }
            ProgramIntercomNPC ^{
                Description=Once uploaded to the onboard computer, the program is able to decode dominator speech. With most dominators, you must first break through the defensive field with a scanner.
                Description=<clr><clrEnd>
                Description=Number of runs: <Data1>
                DescriptionRus=Программа загружается в бортовой компьютер, она позволяет декодировать речь доминаторов. Для большинства доминаторов необходимо преодолеть защитное поле с помощью сканера.
                DescriptionRus=<clr><clrEnd>
                DescriptionRus=Количество запусков: <Data1> шт.
                Icon=3
                Name=Intercom
                NameRus=Интерком
                ReadMe=Данная инфошка используется только как маркер. При добавлении боту любой антидоминаторской программы, ему автоматически добавляется и один "Интерком" для условной возможности её активации.
            }
            ProgramShocker5300NPC ^{
                Description=The program disrupts the function of electronic circuits, complicating navigation and impairing the robot's speed and accuracy.
                Description=<clr><clrEnd>
                Description=Number of runs: <Data1>
                DescriptionRus=Программа мешает работе электрических цепей, затрудняет навигацию. Робот медленно летает, плохо стреляет.
                DescriptionRus=<clr><clrEnd>
                DescriptionRus=Количество запусков: <Data1> шт.
                Icon=3
                Name=Shocker-5300
                NameRus=Шоккер-5300
                OnActCode ^{
                    01=dword cur_info = CurInfo();
                    02=dword cur_ship = ScriptItemActShip();
                    03=if(!ShipInNormalSpace(cur_ship)) exit;
                    04=if(!StarBattle(ShipStar(cur_ship))) exit;
                    05=int in_fear = ShipInFear(cur_ship);
                    06=if(ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3) > CurTurn()) exit;
                    07=dword target;
                    08=if(!in_fear) target = ShipGetBad(cur_ship);
                    09=else
                    10 ^{
                        01=if(!fun_init)
                        02 ^{
                            01=int fun_init = 1;
                            02=unknown ShipNearbyShips = ImportedFunction('UtilityFunctions', 'ShipNearbyShips');
                        }
                        03=target = ShipNearbyShips(cur_ship, 1, 0, 1, '', '');
                    }
                    11=if(!target) exit;
                    12=if(ShipTypeN(target)) exit;
                    13=if(ShipCustomFaction(target) != '') exit;
                    14=if(DomikProgrammDate(target)) exit;
                    15=if(!in_fear)
                    16 ^{
                        01=if(Rnd(1, 100) <= abs(HullDamage(target) - 100) - 25) exit;
                    }
                    17=else
                    18 ^{
                        01=if(Rnd(1, 100) <= HullDamage(cur_ship) + 25) exit;
                    }
                    19=int sub_type = ShipSubType(target);
                    20=if(!sub_type || sub_type > 6) exit;
                    21=if(ShipScanerPower(cur_ship) <= ShipProtectability(target)) exit;
                    22=if(!in_fear)
                    23 ^{
                        01=if(Dist(cur_ship, target) > 350) exit;
                    }
                    24=else
                    25 ^{
                        01=if(Dist(cur_ship, target) > 400) exit;
                    }
                    26=DomikProgramm(target, 9);
                    27=DomikProgrammDate(target, CurTurn()+7);
                    28=if(ShipCustomShipInfoData(0, CurInfo(), 1) > 1)
                    29 ^{
                        01=ShipCustomShipInfoData(0, CurInfo(), 1, ShipCustomShipInfoData(0, CurInfo(), 1) - 1);
                    }
                    30=else
                    31 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramShocker5300NPC');
                    }
                    32=if(ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) > 1)
                    33 ^{
                        01=ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) - 1);
                    }
                    34=else
                    35 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramIntercomNPC');
                    }
                    36=ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1, ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1) - 1);
                    37=if(!in_fear) ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 8);
                    38=else ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 2);
                    39=if(ShipInNormalSpace(Player()))
                    40 ^{
                        01=if(ShipStar(cur_ship) == ShipStar(Player()))
                        02 ^{
                            01=if(Dist(cur_ship, Player()) <= ShipRadarRange(Player()))
                            02 ^{
                                01=str text = ItemSubrace(ShipItems(target, 0));
                                02=if(text==0) text = 'Blazer';
                                03=else if(1 == text) text = 'Keller';
                                04=else text = 'Terron';
                                05=if(Rnd(0, 1)) text = text + '1';
                                06=str player_name = ShipName(Player());
                                07=SetName(Player(), '*#*NameReplace*#*');
                                08=text = Format(CT('ShipGreetings.Dominator.' + text), '*#*NameReplace*#*', ShipName(cur_ship), '255,240,100');
                                09=SetName(Player(), player_name);
                                10=str prog_name = CT('Programms.Shock.Name');
                                11=text = '<color=255,240,100>' + Name(cur_ship) + '</color>' + '-->' + '<color=255,240,100>' + Name(target) + '</color>' + CT('FormInfo.br') + '- ' + text + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammPlayer'), '<Name' + '>', prog_name, '255,240,100') + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammOk'), '<Name' + '>', prog_name, '255,240,100');
                                12=Ether(1, '', text, cur_ship, target);
                            }
                        }
                    }
                }
                OnActCodeTypes=t_OnStep
                OnActStepTypes=5
            }
            ProgramSystemShutdownNPC ^{
                Description=All robot data is deleted. The dominator shuts down, unable to respond to any signals.
                Description=<clr><clrEnd>
                Description=Number of runs: <Data1>
                DescriptionRus=Все данные робота удаляются. Доминатор отключается, ни на что более не реагирует.
                DescriptionRus=<clr><clrEnd>
                DescriptionRus=Количество запусков: <Data1> шт.
                Icon=3
                Name=System shutdown
                NameRus=Системное отключение
                OnActCode ^{
                    01=dword cur_info = CurInfo();
                    02=dword cur_ship = ScriptItemActShip();
                    03=if(!ShipInNormalSpace(cur_ship)) exit;
                    04=if(!StarBattle(ShipStar(cur_ship))) exit;
                    05=int in_fear = ShipInFear(cur_ship);
                    06=if(ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3) > CurTurn()) exit;
                    07=dword target;
                    08=if(!in_fear) target = ShipGetBad(cur_ship);
                    09=else
                    10 ^{
                        01=if(!fun_init)
                        02 ^{
                            01=int fun_init = 1;
                            02=unknown ShipNearbyShips = ImportedFunction('UtilityFunctions', 'ShipNearbyShips');
                        }
                        03=target = ShipNearbyShips(cur_ship, 1, 0, 1, '', '');
                    }
                    11=if(!target) exit;
                    12=if(ShipTypeN(target)) exit;
                    13=if(ShipCustomFaction(target) != '') exit;
                    14=if(DomikProgrammDate(target)) exit;
                    15=if(!in_fear)
                    16 ^{
                        01=if(Rnd(1, 100) <= abs(HullDamage(target) - 100) - 60) exit;
                    }
                    17=else
                    18 ^{
                        01=if(Rnd(1, 100) <= HullDamage(cur_ship) + 15) exit;
                    }
                    19=int sub_type = ShipSubType(target);
                    20=if(!sub_type || (sub_type > 3 && sub_type != 6)) exit;
                    21=if(ShipScanerPower(cur_ship) <= ShipProtectability(target)) exit;
                    22=if(!in_fear)
                    23 ^{
                        01=if(Dist(cur_ship, target) > 350) exit;
                    }
                    24=else
                    25 ^{
                        01=if(Dist(cur_ship, target) > 400) exit;
                    }
                    26=DomikProgramm(target, 11);
                    27=DomikProgrammDate(target, CurTurn());
                    28=if(ShipCustomShipInfoData(0, CurInfo(), 1) > 1)
                    29 ^{
                        01=ShipCustomShipInfoData(0, CurInfo(), 1, ShipCustomShipInfoData(0, CurInfo(), 1) - 1);
                    }
                    30=else
                    31 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramSystemShutdownNPC');
                    }
                    32=if(ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) > 1)
                    33 ^{
                        01=ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) - 1);
                    }
                    34=else
                    35 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramIntercomNPC');
                    }
                    36=ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1, ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1) - 1);
                    37=if(!in_fear) ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 14);
                    38=else ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 4);
                    39=if(ShipInNormalSpace(Player()))
                    40 ^{
                        01=if(ShipStar(cur_ship) == ShipStar(Player()))
                        02 ^{
                            01=if(Dist(cur_ship, Player()) <= ShipRadarRange(Player()))
                            02 ^{
                                01=str text = ItemSubrace(ShipItems(target, 0));
                                02=if(text==0) text = 'Blazer';
                                03=else if(1 == text) text = 'Keller';
                                04=else text = 'Terron';
                                05=if(Rnd(0, 1)) text = text + '1';
                                06=str player_name = ShipName(Player());
                                07=SetName(Player(), '*#*NameReplace*#*');
                                08=text = Format(CT('ShipGreetings.Dominator.' + text), '*#*NameReplace*#*', ShipName(cur_ship), '255,240,100');
                                09=SetName(Player(), player_name);
                                10=str prog_name = CT('Programms.Disconnection.Name');
                                11=text = '<color=255,240,100>' + Name(cur_ship) + '</color>' + '-->' + '<color=255,240,100>' + Name(target) + '</color>' + CT('FormInfo.br') + '- ' + text + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammPlayer'), '<Name' + '>', prog_name, '255,240,100') + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammOk'), '<Name' + '>', prog_name, '255,240,100');
                                12=Ether(1, '', text, cur_ship, target);
                            }
                        }
                    }
                }
                OnActCodeTypes=t_OnStep
                OnActStepTypes=5
            }
            ProgramWCoderNPC ^{
                Description=A universal codec for hacking and changing passwords of weapon systems. The targeted dominator will require time to restore the data.
                Description=<clr><clrEnd>
                Description=Number of runs: <Data1>
                DescriptionRus=Универсальный кодек подбора и замены паролей орудийных систем. Доминатору понадобится время, чтобы восстановить данные.
                DescriptionRus=<clr><clrEnd>
                DescriptionRus=Количество запусков: <Data1> шт.
                Icon=3
                Name=W-Coder
                NameRus=W-Кодер
                OnActCode ^{
                    01=dword cur_info = CurInfo();
                    02=dword cur_ship = ScriptItemActShip();
                    03=if(!ShipInNormalSpace(cur_ship)) exit;
                    04=if(!StarBattle(ShipStar(cur_ship))) exit;
                    05=int in_fear = ShipInFear(cur_ship);
                    06=if(ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3) > CurTurn()) exit;
                    07=dword target;
                    08=if(!in_fear) target = ShipGetBad(cur_ship);
                    09=else
                    10 ^{
                        01=if(!fun_init)
                        02 ^{
                            01=int fun_init = 1;
                            02=unknown ShipNearbyShips = ImportedFunction('UtilityFunctions', 'ShipNearbyShips');
                        }
                        03=target = ShipNearbyShips(cur_ship, 1, 0, 1, '', '');
                    }
                    11=if(!target) exit;
                    12=if(ShipTypeN(target)) exit;
                    13=if(ShipCustomFaction(target) != '') exit;
                    14=if(DomikProgrammDate(target)) exit;
                    15=if(!in_fear)
                    16 ^{
                        01=if(Rnd(1, 100) <= abs(HullDamage(target) - 100) - 45) exit;
                    }
                    17=else
                    18 ^{
                        01=if(Rnd(1, 100) <= HullDamage(cur_ship) + 20) exit;
                    }
                    19=int sub_type = ShipSubType(target);
                    20=if(!sub_type || (sub_type > 4 && sub_type != 6)) exit;
                    21=if(ShipScanerPower(cur_ship) <= ShipProtectability(target)) exit;
                    22=if(!in_fear)
                    23 ^{
                        01=if(Dist(cur_ship, target) > 350) exit;
                    }
                    24=else
                    25 ^{
                        01=if(Dist(cur_ship, target) > 400) exit;
                    }
                    26=DomikProgramm(target, 7);
                    27=DomikProgrammDate(target, CurTurn()+10);
                    28=if(ShipCustomShipInfoData(0, CurInfo(), 1) > 1)
                    29 ^{
                        01=ShipCustomShipInfoData(0, CurInfo(), 1, ShipCustomShipInfoData(0, CurInfo(), 1) - 1);
                    }
                    30=else
                    31 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramWCoderNPC');
                    }
                    32=if(ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) > 1)
                    33 ^{
                        01=ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) - 1);
                    }
                    34=else
                    35 ^{
                        01=ShipDeleteCustomShipInfo(cur_ship, 'ProgramIntercomNPC');
                    }
                    36=ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1, ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 1) - 1);
                    37=if(!in_fear) ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 12);
                    38=else ShipCustomShipInfoData(cur_ship, 'ShipWithProgramsInfo', 3, CurTurn() + 3);
                    39=if(ShipInNormalSpace(Player()))
                    40 ^{
                        01=if(ShipStar(cur_ship) == ShipStar(Player()))
                        02 ^{
                            01=if(Dist(cur_ship, Player()) <= ShipRadarRange(Player()))
                            02 ^{
                                01=str text = ItemSubrace(ShipItems(target, 0));
                                02=if(text==0) text = 'Blazer';
                                03=else if(1 == text) text = 'Keller';
                                04=else text = 'Terron';
                                05=if(Rnd(0, 1)) text = text + '1';
                                06=str player_name = ShipName(Player());
                                07=SetName(Player(), '*#*NameReplace*#*');
                                08=text = Format(CT('ShipGreetings.Dominator.' + text), '*#*NameReplace*#*', ShipName(cur_ship), '255,240,100');
                                09=SetName(Player(), player_name);
                                10=str prog_name = CT('Programms.WeaponBlocking.Name');
                                11=text = '<color=255,240,100>' + Name(cur_ship) + '</color>' + '-->' + '<color=255,240,100>' + Name(target) + '</color>' + CT('FormInfo.br') + '- ' + text + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammPlayer'), '<Name' + '>', prog_name, '255,240,100') + CT('FormInfo.br') + '- ' + Format(CT('Talk.Dominator.ProgrammOk'), '<Name' + '>', prog_name, '255,240,100');
                                12=Ether(1, '', text, cur_ship, target);
                            }
                        }
                    }
                }
                OnActCodeTypes=t_OnStep
                OnActStepTypes=5
            }
            ShipWithProgramsInfo ^{
                DescriptionRus=Используется для автоматического пополнения запаса программ у NPC, имеющего данную инфошку
                Icon=3
                Name=
                OnActCode ^{
                    01=dword cur_info = CurInfo();
                    02=dword cur_ship = ScriptItemActShip();
                    03=if(ShipInNormalSpace(cur_ship)) exit;
                    04=if(ShipInPrison(cur_ship)) exit;
                    05=if(!ShipEqInSlot(cur_ship, t_Scaner)) exit;
                    06=if(ShipCustomShipInfoData(0, cur_info, 1) >= ShipCustomShipInfoData(0, cur_info, 2)) exit;
                    07=if(CurTurn() < ShipCustomShipInfoTextData(0, cur_info, 1)) exit;
                    08=dword place = GetShipPlanet(cur_ship);
                    09=if(!place) place = GetShipRuins(cur_ship);
                    10=if(!place) exit;
                    11=str ship_type = ShipType(cur_ship);
                    12=if(Rnd(1, 100) <= ProgramsDistChancesArray[ship_type, 'ProgramsGetChance'])
                    13 ^{
                        01=str check = max(1, Rnd(1, 100) - (10 - 1.25 * GalaxyTechLevel()));
                        02=for(int i = 1; i <= ProgramsDistChancesArray[ship_type, 'ProgramsCount']; i = i + 1)
                        03 ^{
                            01=if(int(check) <= ProgramsDistChancesArray[ship_type, i])
                            02 ^{
                                01=check = i;
                                02=break;
                            }
                        }
                        04=check = GetVariableName(ProgramsDistChancesArray[ship_type, int(check)]);
                        05=check = 'Program' + check + 'NPC';
                        06=int prog_num = ShipFindCustomShipInfoByType(cur_ship, check);
                        07=if(~prog_num)
                        08 ^{
                            01=ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) + 1);
                            02=ShipCustomShipInfoData(cur_ship, prog_num, 1, ShipCustomShipInfoData(cur_ship, prog_num, 1) + 1);
                        }
                        09=else
                        10 ^{
                            01=prog_num = ShipFindCustomShipInfoByType(cur_ship, 'ProgramIntercomNPC');
                            02=if(~prog_num) ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1, ShipCustomShipInfoData(cur_ship, 'ProgramIntercomNPC', 1) + 1);
                            03=else ShipAddCustomShipInfo(cur_ship, 'ProgramIntercomNPC', '', 1);
                            04=ShipAddCustomShipInfo(cur_ship, check, '', 1);
                        }
                        11=ShipCustomShipInfoData(0, cur_info, 1, ShipCustomShipInfoData(0, cur_info, 1) + 1);
                    }
                    14=ShipCustomShipInfoTextData(0, cur_info, 1, CurTurn() + 30);
                }
                OnActCodeTypes=t_OnStep
                OnActStepTypes=11
            }
        }
    }
}
Programms ^{
    Disconnection ^{
        AddToShipInfo=Shutdown
        Name=System shutdown
        Text=All robot data is deleted. The dominator shuts down, unable to respond to any signals.
        Text=<clr><clrEnd>
        Text=Number of runs: <Count>.
    }
    Insanity ^{
        AddToShipInfo=System overload
        Name=Gatrix matrix
        Text=A giant matrix of chaotic data overloads the robot's electronic circuits with a torrent of information, forcing the target to fly and shoot aimlessly.
        Text=<clr><clrEnd>
        Text=Number of runs: <Count>.
    }
    Intercom ^{
        Name=Intercom
        Text=Once uploaded to the onboard computer, the program is able to decode dominator speech. With most dominators, you must first break through the defensive field with a scanner.
        Text=<clr><clrEnd>
        Text=Number of runs: <Count>.
    }
    SelfDestruction ^{
        AddToShipInfo=Command Zero
        Name=Absolute weapon
        Text=Level zero command self-destruct. Cannot be resisted by dominators.
        Text=<clr><clrEnd>
        Text=Number of runs: <Count>.
    }
    Shipwreck ^{
        AddToShipInfo=Distress signal
        Name=Distress signal
        Text=Upon receiving a distress signal, the dominator will dump some of its equipment and weapons.
        Text=<clr><clrEnd>
        Text=Number of runs: <Count>.
    }
    Shock ^{
        AddToShipInfo=Electromagnetic shock
        Name=Shocker-5300
        Text=The program disrupts the function of electronic circuits, complicating navigation and impairing the robot's speed and accuracy.
        Text=<clr><clrEnd>
        Text=Number of runs: <Count>.
    }
    WeaponBlocking ^{
        AddToShipInfo=Weapon blockage
        Name=W-Coder
        Text=A universal codec for hacking and changing passwords of weapon systems. The targeted dominator will require time to restore the data.
        Text=<clr><clrEnd>
        Text=Number of runs: <Count>.
    }
}
