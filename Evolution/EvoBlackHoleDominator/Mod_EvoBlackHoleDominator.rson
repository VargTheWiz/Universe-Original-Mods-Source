{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -60,
  "ViewPos.y":  -151,
  "ScriptName":  "Mod_EvoBlackHoleDominator",
  "ScriptFileOut":  "H:\\Mod_EvoBlackHoleDominator.scr",
  "ScriptTextOut":  "H:\\Mod_EvoBlackHoleDominator.txt",
  "GraphPoint.Count":  50,
  "GraphLink.Count":  23,
  "GraphRectText.Count":  0,
  "Variables.Count":  27,
  "Stars.Count":  1,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  6,
  "Groups.Count":  6,
  "Places.Count":  0,
  "Items.Count":  0,
  "Ethers.Count":  0,
  "Dialogs.Count":  0,
  "DialogMessages.Count":  0,
  "DialogAnswers.Count":  0,
  "Operations.Count":  4,
  "Statements.Count":  4,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "PlayerGroup",
          "Pos.x":  230,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  2,
          "Owner":  62,
          "Group.Type":  0,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "InvadersGroup1",
          "Pos.x":  310,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  11,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "InvadersGroup2",
          "Pos.x":  310,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  27,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "InvadersGroup3",
          "Pos.x":  310,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  29,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "InvadersGroup4",
          "Pos.x":  310,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  31,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "InvadersGroup5",
          "Pos.x":  310,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  33,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  550,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  5,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "if(!GCntRun(GScriptName)) GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  590,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  6,
          "Total.Lines":  169,
          "Code.Type":  "Turn",
          "Code":          
          [
              "for(i=GalaxyEvents()-1; i>=0; i=i-1) {",
              "  if(GalaxyEventDate(i)<CurTurn()) break;",
              "  if(GalaxyEventType(i)=='PlayerCreatedStarDestroyerBH') {",
              "    starDestroyerHoleId=GalaxyEventData(i, 0);",
              "    starDestroyerHoleTurn=GalaxyEventData(i, 1);",
              "  }",
              "}",
              "//Обработчик скриптовых АБ",
              "if(ShipInHole(Player())) {  //Игрок в ЧД",
              "  flagAB=0;",
              "  curHole=ShipOrderObj(Player());",
              "  for(i=0; i<ArrayDim(holesArr); i=i+1) { //Сравниваем Id ЧД из массива с Id ЧД игрока",
              "    if(holesArr[i,0]) { //ЧД существует",
              "      if(Id(curHole)==holesArr[i,0]) {",
              "        if(!(abCount%4)) flagAB=2; //Каждая 4-ая ЧД с бертором, если посещено достаточно ЧД",
              "        else flagAB=1; //Флаг для старта скриптовой АБ",
              "        holeIndex=i;",
              "        break;",
              "      }",
              "    }",
              "  }",
              "  if(Id(curHole)==starDestroyerHoleId) {",
              "    if(Rnd(1, 100)<=12) flagAB=1; //12% шанс на битву в ЧД ТИ",
              "    starDestroyerHoleId=0;",
              "    starDestroyerHoleTurn=0;",
              "  }",
              "  if(!flagAB) { //Если не нашли скриптовую ЧД, делаем проверку на ЧД Келлера",
              "    if(!DomiksDefeated(1)) { //Келлер не побежден",
              "      if(ShipInNormalSpace(Keller())) { //Келлер не в ЧД",
              "        curSystem=ShipStar(Keller());",
              "        if(ShipStar(Player())==curSystem) { //Келлер в системе с игроком",
              "          if(Id(curSystem)!=lastSystemId) { //В этой системе еще не было битвы с келлероидами в КЧД",
              "            if(StarHoles(curSystem)>0) {",
              "              for(i=0; i<StarHoles(curSystem); i=i+1) {  //Перебор всех ЧД в системе",
              "                curHole=StarHoles(curSystem, i);",
              "                if(curHole==ShipOrderObj(Player())) { //Если игрок находится именно в этой ЧД",
              "                  if(HoleStar1(curHole)==HoleStar2(curHole)) {  //Если вход и выход совпадают",
              "                    flagAB=2; //Флаг АБ с бертором",
              "                    lastSystemId=Id(curSystem); //Запоминаем Id системы, чтобы не повторять бой с келлероидами в КЧД",
              "                    break;",
              "                  }",
              "                }",
              "              }",
              "            }",
              "          }",
              "        }",
              "      }",
              "    }",
              "  }",
              "  if(flagAB) {  //Скриптовая ЧД существует",
              "    if(!GABStatus) {  //Игрок не участвует в скриптовой АБ",
              "      if(!ShipOrderData2(Player())) { //Игрок влетел со стороны входа в ЧД",
              "        if(!SectorVisible(StarToCon(HoleStar2(curHole)))) {  //Если нет карты сектора с выходом из ЧД",
              "          MakeShipEnterStar(Player(), HoleStar1(curHole), HoleStar2(curHole), ShipOrderData1(Player()));",
              "          OrderJumpHole(Player(), curHole); //Отправляем игрока обратно",
              "          ShipOrderData2(Player(), 1);",
              "        }",
              "      }",
              "      else { //Игрок влетел со стороны выхода из ЧД",
              "        if(!SectorVisible(StarToCon(HoleStar1(curHole)))) {  //Если нет карты сектора со входом в ЧД",
              "          MakeShipEnterStar(Player(), HoleStar2(curHole), HoleStar1(curHole), ShipOrderData1(Player()));",
              "          OrderJumpHole(Player(), curHole); //Отправляем игрока обратно",
              "          ShipOrderData2(Player(), 0);",
              "        }",
              "      }",
              "      CreateDomShipsAB(HoleStar2(curHole), flagAB); //Создаем противников для АБ",
              "      //Выбор карты АБ",
              "      for(i=1; i<=14; i=i+1) ArrayAdd(tempArr, i); //Стандартные карты",
              "      if(ResourceExist('ABMap.Tachanka')) { //Карты из RevAB",
              "        for(i=15; i<=20; i=i+1) ArrayAdd(tempArr, i);",
              "      }",
              "      if(ResourceExist('ABMap.02_1_V02')) { //Карты из SR1ABMaps",
              "        for(i=21; i<=23; i=i+1) ArrayAdd(tempArr, i);",
              "      }",
              "      if(ResourceExist('ABMap.endless')) { //Карты из AdvancedABMaps",
              "        for(i=24; i<=27; i=i+1) ArrayAdd(tempArr, i);",
              "      }",
              "      tRnd=tempArr[Rnd(1,ArrayDim(tempArr)-1)];",
              "      ArrayClear(tempArr);",
              "      if(tRnd<=14) StartAB('ABMap.map_'+tRnd);",
              "      else {",
              "        if(tRnd == 15) StartAB('ABMap.Nonsense');",
              "        else if(tRnd == 16) StartAB('ABMap.Pulsar');",
              "        else if(tRnd == 17) StartAB('ABMap.Strolocobs');",
              "        else if(tRnd == 18) StartAB('ABMap.Tachanka');",
              "        else if(tRnd == 19) StartAB('ABMap.Fifth_Dimension');",
              "        else if(tRnd == 20) StartAB('ABMap.Spider\\\\\\'s_Lair');",
              "        else if(tRnd == 21) StartAB('ABMap.02_1_V02');",
              "        else if(tRnd == 22) StartAB('ABMap.04_2_V01');",
              "        else if(tRnd == 23) StartAB('ABMap.04_3_V03');",
              "        else if(tRnd == 24) StartAB('ABMap.curvature');",
              "        else if(tRnd == 25) StartAB('ABMap.trap');",
              "        else if(tRnd == 26) StartAB('ABMap.endless');",
              "        else if(tRnd == 27) StartAB('ABMap.polygons');",
              "      }",
              "    }",
              "    else if(GABStatus==2) { //скриптовая АБ закончилась",
              "      abCount=abCount+1;  //Увеличиваем счетчик посещенных ЧД с доминаторами",
              "      if(HoleStar1(curHole)!=HoleStar2(curHole)) { //Если скриптовый бой был не в КЧД",
              "        DestroyInvaders(HoleStar1(curHole), holeIndex); //Убиваем всех врагов в ЧД",
              "        DestroyInvaders(HoleStar2(curHole), holeIndex);",
              "        holesArr[holeIndex,0]=0; //Обнуляем Id скриптовой ЧД",
              "        holesArr[holeIndex,4]=-1; //Меняем статус скриптовой ЧД",
              "      }",
              "    }",
              "  }",
              "}",
              "if(lastSystemId) { //Сброс lastSystemId для случаев, когда Келлер несколько раз летит в одну систему",
              "  if(!DomiksDefeated(1)) {",
              "    if(ShipInHyperSpace(Keller())) lastSystemId=0;",
              "  }",
              "}",
              "//Открытие новых ЧД по таймеру",
              "if(CurTurn()>=newHoleTimer) {",
              "  holeIndex=CreateDomBH();  //Попытка создать ЧД",
              "  if(~holeIndex) {  //ЧД создана",
              "    if(holesArr[holeIndex,4]) FormInvadersGroup(holeIndex); //Отправляем доминаторов в ЧД, если статус >0",
              "  }",
              "  if(Rnd(1,100)>85) {  //15% шанс на быстрое открытие второй ЧД",
              "    newHoleTimer=CurTurn()+Rnd(10,15);",
              "  }",
              "  else {",
              "    tRnd=Rnd(1,100); //Задаем случайный таймер до следующей ЧД",
              "    if(tRnd<11) newHoleTimer=150; //10% - малый таймер",
              "    else if(tRnd>10 && tRnd<=30) newHoleTimer=210; //20% - средний таймер",
              "    else if(tRnd>30 && tRnd<=75) newHoleTimer=330;  //45% - большой таймер",
              "    else newHoleTimer=480;  //25% - очень большой таймер",
              "    newHoleTimer=CurTurn()+round(0.01*Rnd(85,115)*newHoleTimer); //Дополнительный рандом",
              "  }",
              "}",
              "//Обработчик скриптовых ЧД",
              "for(i=0; i<ArrayDim(holesArr); i=i+1) { //Перебираем все ЧД",
              "  if(holesArr[i,0]) { //ЧД существует",
              "    if(holesArr[i,4]>1) { //Если статус ЧД не нулевой - создаем волну врагов",
              "      if(CurTurn()==(holesArr[i,3]-5*holesArr[i,4])) {",
              "        CreateInvadersWave(i);",
              "        holesArr[i,4]=holesArr[i,4]-1;",
              "      }",
              "    }",
              "    if(CurTurn()>holesArr[i,3]) { //Если таймер ЧД подошел к концу",
              "      holesArr[i,0]=0;  //Обнуляем Id ЧД",
              "      holesArr[i,4]=-1;  //Меняем статус ЧД",
              "    }",
              "  }",
              "}",
              "//Обнуление ID ЧД ТИ по таймеру, если игрок в нее не полетел",
              "if(starDestroyerHoleId) {",
              "  if(CurTurn()>=starDestroyerHoleTurn+200) {",
              "    starDestroyerHoleId=0;",
              "    starDestroyerHoleTurn=0;",
              "  }",
              "}",
              "//Завершение скрипта после победы над Келлером",
              "if(ShipInNormalSpace(Player())) {",
              "  if(DomiksDefeated(1)) {",
              "    for(i=0; i<ArrayDim(holesArr); i=i+1) {",
              "      if(holesArr[i,0]) {",
              "        holesArr[i,0]=0;  //Обнуляем Id ЧД",
              "        holesArr[i,4]=-1;  //Меняем статус ЧД",
              "        DestroyInvaders(GalaxyStar(holesArr[i,1]), i); //Убиваем все корабли в ЧД",
              "        DestroyInvaders(GalaxyStar(holesArr[i,2]), i);",
              "      }",
              "    }",
              "    AllShipOut();",
              "  }",
              "}",
              "if(reserveGroup) {  //Если существует резервная группа",
              "  if(CurTurn()>reserveTimer) reserveGroup=GroupJoin(reserveGroup);  //Приписываем корабли к группе",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  570,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  10,
          "Total.Lines":  399,
          "Code.Type":  "Init",
          "Code":          
          [
              "invadersNum=8+GalaxyDiffLevels()/50; //кол-во атакующих из ЧД кораблей",
              "invadersInWave=3+GalaxyDiffLevels()/50; //кол-во противников с каждой доп. волны",
              "attackTimer=120; //дней до вторжения",
              "newHoleTimer=Rnd(812,1068); //таймер до открытия первой ЧД",
              "for(i=t_ArtefactHull; i<=t_ArtFastRacks; i=i+1) ArrayAdd(artsArr, i); //Инициализация массива артефактов",
              "domArr=newarray(23,3);",
              "//Конфигурация врагов в ЧД. domArr[1,1]=101; = 1 смерш, 0 менков, 1 штип. domArr[1,0]=1000; = 1 ургант.",
              "domArr[0,0]=100;      domArr[0,1]=11;       domArr[0,2]=2;",
              "domArr[1,0]=1000;     domArr[1,1]=101;      domArr[1,2]=20;",
              "domArr[2,0]=1001;     domArr[2,1]=110;      domArr[2,2]=102;",
              "domArr[3,0]=1010;     domArr[3,1]=1002;     domArr[3,2]=111;",
              "domArr[4,0]=1011;     domArr[4,1]=1100;     domArr[4,2]=112;",
              "domArr[5,0]=10011;    domArr[5,1]=1101;     domArr[5,2]=1012;",
              "domArr[6,0]=10101;    domArr[6,1]=1110;     domArr[6,2]=1102;",
              "domArr[7,0]=10110;    domArr[7,1]=10021;    domArr[7,2]=1111;",
              "domArr[8,0]=10111;    domArr[8,1]=11002;    domArr[8,2]=1112;",
              "domArr[9,0]=10112;    domArr[9,1]=10023;    domArr[9,2]=1121;",
              "domArr[10,0]=10121;   domArr[10,1]=10113;   domArr[10,2]=1211;",
              "domArr[11,0]=10122;   domArr[11,1]=11013;   domArr[11,2]=1220;",
              "domArr[12,0]=10220;   domArr[12,1]=11022;   domArr[12,2]=1221;",
              "domArr[13,0]=10221;   domArr[13,1]=11023;   domArr[13,2]=1222;",
              "domArr[14,0]=10222;   domArr[14,1]=11121;   domArr[14,2]=1231;",
              "domArr[15,0]=10231;   domArr[15,1]=11122;   domArr[15,2]=1321;",
              "domArr[16,0]=10321;   domArr[16,1]=11131;   domArr[16,2]=2221;",
              "domArr[17,0]=10322;   domArr[17,1]=11221;   domArr[17,2]=2222;",
              "domArr[18,0]=10331;   domArr[18,1]=11222;   domArr[18,2]=12121;",
              "domArr[19,0]=20222;   domArr[19,1]=11231;   domArr[19,2]=12122;",
              "domArr[20,0]=20231;   domArr[20,1]=11321;   domArr[20,2]=12131;",
              "domArr[21,0]=20321;   domArr[21,1]=11330;   domArr[21,2]=12221;",
              "domArr[22,0]=1120211; domArr[22,1]=1211220; domArr[22,2]=1112111;",
              "//holesArr[i] - индекс ЧД",
              "//holesArr[i,0] - Id ЧД",
              "//holesArr[i,1] - Id-1 системы назначения",
              "//holesArr[i,2] - Id-1 системы отправления",
              "//holesArr[i,3] - таймер атаки",
              "//holesArr[i,4] - статус ЧД: -1 - отсутствует, 0 - просто ЧД с АБ, >0 - кол-во атак из ЧД",
              "holesArr=newarray(5,5);",
              "for(i=0; i<ArrayDim(holesArr); i=i+1) { //Инициализация массива",
              "  for(j=0; j<ArrayDim(holesArr,0)-1; j=j+1) holesArr[i,j]=0;",
              "  holesArr[i,4]=-1;",
              "}",
              "//Функция создания доминаторской ЧД. Возвращает индекс массива holesArr[i] или -1;",
              "//--------------------------------------------------------------------------------",
              "//Проверяется максимум ЧД, если он не достигнут - выбирается ситема для атаки.",
              "//Пиратские и коалиционные системы заносятся в массив несколько раз, для повыешенного шанса атаки.",
              "//Затем выбирается система келлероидов, в нее будет вести ЧД.",
              "//Если все условия выполняются, открывается ЧД, заполняется массив данных.",
              "//В противном случае, функция возвращает -1.",
              "function CreateDomBH() {",
              "  int i, index, holeStatus; str newsStr;",
              "  dword curSystem, domSystem, targetSystem, tHole;",
              "  for(i=0; i<ArrayDim(holesArr); i=i+1) { //Поиск подходящего индекса массива",
              "    if(!holesArr[i,0] && holesArr[i,4]==-1) { //Проверка на наличие ЧД",
              "      index=i;  //Нашли свободный индекс",
              "      break;",
              "    }",
              "    else index=-1; //Достигнут максимум ЧД",
              "  }",
              "  if(~index) { //Проверка на максимум ЧД",
              "    for(i=0; i<GalaxyStars(); i=i+1) {  //Поиск системы для атаки",
              "      curSystem=GalaxyStar(i);",
              "      if(StarBattle(curSystem)) continue;",
              "      if(NoComeKlingToStar(curSystem)) continue;",
              "      if(!StarOwner(curSystem)) { //Коалиция",
              "        for(j=0; j<2; j=j+1) ArrayAdd(tempArr, curSystem);",
              "      }",
              "      else if(StarOwner(curSystem)==2) {  //Пираты",
              "        if(StarToCon(curSystem)==StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "        for(j=0; j<2; j=j+1) ArrayAdd(tempArr, curSystem);",
              "      }",
              "      else { //Доминаторы",
              "        if(StarSeries(curSystem)==1) continue;",
              "        ArrayAdd(tempArr, curSystem);",
              "      }",
              "    }",
              "    if(ArrayDim(tempArr)<=1) targetSystem=0;",
              "    else targetSystem=tempArr[Rnd(1,ArrayDim(tempArr)-1)];",
              "    if(targetSystem) { //Если нашли систему для атаки",
              "        for(i=0; i<GalaxyStars(); i=i+1) {  //Поиск келлероидной системы",
              "        curSystem=StarNearbyStars(targetSystem, i);",
              "        if(StarBattle(curSystem)) continue;",
              "        if(StarCustomFaction(curSystem)!='') continue;",
              "        if(StarOwner(curSystem) == 1) {",
              "          if(StarSeries(curSystem) == 1) {",
              "            domSystem=curSystem;",
              "            tHole=HoleCreate2(targetSystem, domSystem);",
              "            if(GalaxyDiffLevels()<150) { //Определяем статус ЧД",
              "              if(Rnd(1,100)>25) holeStatus=1; //25% на обычную ЧД без вторжения",
              "              else holeStatus=0;",
              "            }",
              "            else if(GalaxyDiffLevels()<300) {  //10% - без вторжения, 45% - 1 волна, 45% - 2 волны",
              "              tRnd=Rnd(1,100);",
              "              if(tRnd<=10) holeStatus=0;",
              "              else if(tRnd>55) holeStatus=1;",
              "              else holeStatus=2;",
              "            }",
              "            else {  //25% - 1 волна, 25% - 2 волны, 50% - 3 волны",
              "              tRnd=Rnd(1,100);",
              "              if(tRnd<=25) holeStatus=1;",
              "              else if(tRnd>75) holeStatus=2;",
              "              else holeStatus=3;",
              "            }",
              "            if(!holeStatus) HoleTurnCreate(tHole, CurTurn()-110); //ЧД без АБ существует 90 дней",
              "            HoleMap(tHole, 'SkipAB'); //Защита от исследователей из ExpExplorers",
              "            if(!StarOwner(targetSystem) || StarOwner(targetSystem)==2) {  //Если атака будет на систему Коалиции или пиратов",
              "              tRnd=Rnd(1,4); //Добавляем новость о появлении ЧД",
              "              if(!tRnd) newsStr=Format(CT('GalaxyNews.DominatorBlackHole.Create'),'#Star1#',Name(targetSystem),'#Star2#',Name(domSystem));",
              "              else if(tRnd==1) newsStr=Format(CT('GalaxyNews.DominatorBlackHole.Create1'),'#Star1#',Name(targetSystem));",
              "              else if(tRnd==2) newsStr=Format(CT('GalaxyNews.DominatorBlackHole.Create2'),'#Star1#',Name(targetSystem));",
              "              else newsStr=Format(CT('GalaxyNews.DominatorBlackHole.Create3'),'#Star1#',Name(targetSystem));",
              "              AddPlanetNews(newsStr);",
              "              NewsAdd(newsStr);",
              "            }",
              "            break;",
              "          }",
              "        }",
              "      }",
              "    }",
              "    else domSystem=0;",
              "    if(domSystem) { //Если нашли подходящие системы, заполняем массив",
              "      holesArr[index,0]=Id(tHole);",
              "      holesArr[index,1]=Id(targetSystem)-1;",
              "      holesArr[index,2]=Id(domSystem)-1;",
              "      holesArr[index,3]=CurTurn() + attackTimer;",
              "      holesArr[index,4]=holeStatus;",
              "    }",
              "    else index=-1;",
              "  }",
              "  ArrayClear(tempArr);",
              "  result=index;",
              "}",
              "//Функция формирует группу для атаки через ЧД. Параметр - идекс массива holesArr[i].",
              "//-----------------------------------------------------------------------------",
              "//DomInfoBH - инфошка, содержащая данные для корректного взаимодействия с ЧД",
              "//Data1 - индекс holesArr[i]",
              "//Data2 - ЧД-статус. 0 - не влетел в ЧД, 1 - находится в ЧД",
              "function FormInvadersGroup(int index) {",
              "  int i;",
              "  dword tSystem, tPlanet, tShip, curGroup;",
              "  tSystem=GalaxyStar(holesArr[index,2]);",
              "  for(i=0; i<StarShips(tSystem); i=i+1) {",
              "    tShip=StarShips(tSystem, i);",
              "    if(ShipInScript(tShip)) continue;",
              "    if(ShipInHyperSpace(tShip)) continue;",
              "    if(ItemSubrace(ShipEqInSlot(tShip,t_Hull))!=1) continue; //отбор келлероидов",
              "    if(ShipOrder(tShip)==3) continue; //пропуск летящих в другую систему",
              "    if(ShipOrder(tShip)==6) continue; //пропуск сражающихся",
              "    if(ShipSubType(tShip) && ShipSubType(tShip)<6) ArrayAdd(tempArr, Id(tShip));",
              "  }",
              "  if(!GroupCount(InvadersGroup1)) curGroup=InvadersGroup1; //Выбор группы",
              "  else if(!GroupCount(InvadersGroup2)) curGroup=InvadersGroup2;",
              "  else if(!GroupCount(InvadersGroup3)) curGroup=InvadersGroup3;",
              "  else if(!GroupCount(InvadersGroup4)) curGroup=InvadersGroup4;",
              "  else curGroup=InvadersGroup5;",
              "  if((ArrayDim(tempArr)-1)>invadersNum) { //Если в системе есть подходящие корабли",
              "    for(i=1; i<=invadersNum; i=i+1) { //Приписываем их к группе",
              "      tShip=IdToShip(tempArr[i]);",
              "      if(tShip) {",
              "        ShipAddCustomShipInfo(tShip, 'DomInfoBH', 'NoShow', index, 0);",
              "        ShipJoin(curGroup, tShip);",
              "      }",
              "    }",
              "  }",
              "  else {  //Если подходящих кораблей мало - строим на планете",
              "    tPlanet=FindPlanet(tSystem, 'NotMaloc,NotPeleng,NotPeople,NotFei,NotGaal,NotNone,NotPirateClan', 0, 0);",
              "    for(i=0; i<invadersNum; i=i+1) {",
              "      tShip=BuyDomikExtremal(tPlanet, Rnd(1, 5));",
              "      ShipAddCustomShipInfo(tShip, 'DomInfoBH', 'NoShow', index, 0);",
              "      ArrayAdd(reserveArr, Id(tShip)); //Записываем Id корабля в массив",
              "      reserveGroup=curGroup; //Запоминаем группу",
              "      reserveTimer=CurTurn()+2; //Припишем доминаторов к группе через два дня, чтобы отработали все усиливающие их моды",
              "    }",
              "  }",
              "  ArrayClear(tempArr);",
              "}",
              "//Функция приписки доминаторов к группе. Параметр - указатель на группу.",
              "function GroupJoin(dword group) {",
              "  dword tShip; int i;",
              "  for(i=ArrayDim(reserveArr)-1; i>0; i=i-1) { //Перебираем корабли в массиве",
              "    tShip=IdToShip(reserveArr[i]);",
              "    if(tShip) ShipJoin(group, tShip); //Если корабль жив - приписываем к группе",
              "    ArrayDelete(reserveArr, i); //Удаляем элемент",
              "  }",
              "  group=0; //В конце обнуляем указатель на группу",
              "  result=group;",
              "}",
              "//Функция имитирует атаку одной волны врагов через ЧД. Параметр - индекс массива holesArr[i].",
              "function CreateInvadersWave(int index) {",
              "  int i;",
              "  dword tSystem, tPlanet, tShip, tHole;",
              "  tSystem=GalaxyStar(holesArr[index,2]); //Система для постройки кораблей",
              "  for(i=0; i<StarHoles(tSystem); i=i+1) {",
              "    tHole=StarHoles(tSystem, i);",
              "    if(Id(tHole)==holesArr[index,0]) break;",
              "    else tHole=0;",
              "  }",
              "  if(tHole) {",
              "    if(StarOwner(tSystem)==1 && StarSeries(tSystem)==1) {  //Система под контролем келлероидов",
              "      tPlanet=FindPlanet(tSystem,'NotMaloc,NotPeleng,NotPeople,NotFei,NotGaal,NotNone,NotPirateClan',0,0);",
              "    }",
              "    else { //Иначе строим доминаторов на Роджерии",
              "      tPlanet=PlanetPirateClan();",
              "      StarSeries(PlanetToStar(tPlanet),1);",
              "    }",
              "    for(i=0; i<invadersInWave; i=i+1) {",
              "      tShip=BuyDomikExtremal(tPlanet, Rnd(1, 5));",
              "      MakeShipEnterStar(tShip, HoleStar1(tHole), HoleStar2(tHole), 1);",
              "      OrderJumpHole(tShip, tHole);",
              "      ShipOrderData2(tShip, 1);",
              "      ShipSetCoords(tShip, HoleX1(tHole), HoleY1(tHole));",
              "    }",
              "  }",
              "}",
              "//Функция ищет в ЧД корабли с инфошкой и уничтожает их по индексу ЧД.",
              "//Первый параметр - указатель на систему. Второй - индекс ЧД.",
              "function DestroyInvaders(dword system, int index) {",
              "  int i;",
              "  dword ship, curInfo;",
              "  for(i=0;i<StarShips(system);i=i+1) {",
              "    ship=StarShips(system,i);",
              "    if(!ShipInHole(ship)) continue;",
              "    curInfo=ShipFindCustomShipInfoByType(ship, 'DomInfoBH');",
              "    if(~curInfo) {",
              "      if(ShipCustomShipInfoData(ship, curInfo, 1)==index) ShipDestroy(ship);",
              "    }",
              "  }",
              "}",
              "//Функция создания доминаторов для конвертации в скриптовую АБ",
              "//Первый параметр - указатель на систему для постройки кораблей. Второй - флаг генерации бертора в ЧД.",
              "function CreateDomShipsAB(dword system, dword flag) {",
              "  int i, tempInt;",
              "  dword tPlanet, tShip, tItem, domTotal, subtypeShips;",
              "  //Если система не келлероидная, строим доминаторов в Тортугаце",
              "  if(StarOwner(system)!=1 || (StarOwner(system)==1 && StarSeries(system)!=1)) {",
              "    tPlanet=PlanetPirateClan();",
              "    StarSeries(PlanetToStar(tPlanet),1);",
              "  }",
              "  else tPlanet=FindPlanet(system,'NotMaloc,NotPeleng,NotPeople,NotFei,NotGaal,NotNone,NotPirateClan',0,0);",
              "  if(flag==2) domTotal=domArr[min(abCount+1,22),Rnd(0,2)];  //С берторами для КЧД",
              "  else domTotal=domArr[min(abCount+1,21),Rnd(0,2)];  //Без берторов",
              "  //Бертор",
              "  subtypeShips=domTotal/1000000;",
              "  domTotal=domTotal-subtypeShips*1000000;",
              "  for(i=1; i<=subtypeShips; i=i+1) {",
              "    tItem=0;",
              "    tShip=BuyDomikExtremal(tPlanet, 6);//Бертор",
              "    tempInt=Rnd(1,100);",
              "    if(tempInt<=75) tItem=CreateDropArt();",
              "    else tItem=CreateDropMM(1, 10);",
              "    ItemOwner(tItem, Kling);",
              "    ItemSubrace(tItem, 1);",
              "    ConvertToABShip(tShip, 0, 100, 100, '', tItem);",
              "    ShipDestroy(tShip);",
              "  }",
              "  //Клиг",
              "  subtypeShips=domTotal/100000;",
              "  domTotal=domTotal-subtypeShips*100000;",
              "  for(i=1; i<=subtypeShips; i=i+1) {",
              "    tItem=0;",
              "    tShip=BuyDomikExtremal(tPlanet, 7);//Клиг",
              "    tempInt=Rnd(1,100);",
              "    if(tempInt<=50)   tItem=CreateNodes(Rnd(5,20), 1);",
              "    else tItem=CreateQuestItem('Remains_'+Rnd(0,9), Kling);",
              "    ItemSubrace(tItem, 1);",
              "    ConvertToABShip(tShip, 0, 100, 100, '', tItem);",
              "    ShipDestroy(tShip);",
              "  }",
              "  //Эквентор",
              "  subtypeShips=domTotal/10000;",
              "  domTotal=domTotal-subtypeShips*10000;",
              "  for(i=1; i<=subtypeShips; i=i+1) {",
              "    tItem=0;",
              "    tShip=BuyDomikExtremal(tPlanet, 1);//Эквентор",
              "    tempInt=Rnd(1,100);",
              "    if(tempInt<=10)  tItem=CreateNodes(Rnd(60,150), 1);",
              "    else if(tempInt>10 && tempInt<=20) tItem=CreateDropArt();",
              "    else if(tempInt>20 && tempInt<=30) tItem=CreateQuestItem('Remains_'+Rnd(14,18), Kling);",
              "    else if(tempInt>30 && tempInt<=40) tItem=CreateQuestItem('Remains_'+Rnd(0,9), Kling);",
              "    else if(tempInt>40 && tempInt<=70) {",
              "       tItem=ShipItems(tShip, Rnd(1, ShipItems(tShip)-1));//выбирается одна из оборудок корабля",
              "       GetItemFromShip(tShip, FindItemInShip(tShip, tItem));//изымаем оборудку из трюма корабля",
              "    }",
              "    else tItem=CreateDropMM(5, 20);",
              "    ItemSubrace(tItem, 1);",
              "    ConvertToABShip(tShip, 0, 100, 100, '', tItem);",
              "    ShipDestroy(tShip);",
              "  }",
              "  //Ургант",
              "  subtypeShips=domTotal/1000;",
              "  domTotal=domTotal-subtypeShips*1000;",
              "  for(i=1; i<=subtypeShips; i=i+1) {",
              "    tItem=0;",
              "    tShip=BuyDomikExtremal(tPlanet, 2);//Ургант",
              "    tempInt=Rnd(1,100);",
              "    if(tempInt>1 && tempInt<=20)  tItem=CreateNodes(Rnd(40,100), 1);",
              "    else if(tempInt>20 && tempInt<=35) tItem=CreateQuestItem('Remains_'+Rnd(14,18), Kling);",
              "    else if(tempInt>35 && tempInt<=50) tItem=CreateQuestItem('Remains_'+Rnd(0,9), Kling);",
              "    else if(tempInt>50 && tempInt<=75) {",
              "      tItem=ShipItems(tShip, Rnd(1,ShipItems(tShip)-1));//выбирается одна из оборудок корабля",
              "      GetItemFromShip(tShip, FindItemInShip(tShip, tItem));//изымаем оборудку из трюма корабля",
              "    }",
              "    else tItem=CreateDropMM(15, 40);",
              "    ItemSubrace(tItem, 1);",
              "    ConvertToABShip(tShip, 0, 100, 100, '', tItem);",
              "    ShipDestroy(tShip);",
              "  }",
              "  //Смерш",
              "  subtypeShips=domTotal/100;",
              "  domTotal=domTotal-subtypeShips*100;",
              "  for(i=1; i<=subtypeShips; i=i+1) {",
              "    tItem=0;",
              "    tShip=BuyDomikExtremal(tPlanet, 3);//Смерш",
              "    tempInt=Rnd(1,100);",
              "    if(tempInt>1 && tempInt<=20)  tItem=CreateNodes(Rnd(25,60), 1);",
              "    else if(tempInt>20 && tempInt<=35) tItem=CreateQuestItem('Remains_'+Rnd(14,18), Kling);",
              "    else if(tempInt>35 && tempInt<=50) tItem=CreateQuestItem('Remains_'+Rnd(0,9), Kling);",
              "    else if(tempInt>50 && tempInt<=75) {",
              "      tItem=ShipItems(tShip, Rnd(1,ShipItems(tShip)-1));//выбирается одна из оборудок корабля",
              "      GetItemFromShip(tShip, FindItemInShip(tShip, tItem));//изымаем оборудку из трюма корабля",
              "    }",
              "    else tItem=CreateDropMM(30, 70);",
              "    ItemSubrace(tItem, 1);",
              "    ConvertToABShip(tShip, 0, 100, 100, '', tItem);",
              "    ShipDestroy(tShip);",
              "  }",
              "  //Менок",
              "  subtypeShips=domTotal/10;",
              "  domTotal=domTotal-subtypeShips*10;",
              "  for(i=1; i<=subtypeShips; i=i+1) {",
              "    tItem=0;",
              "    tShip=BuyDomikExtremal(tPlanet, 4);//Менок",
              "    tempInt=Rnd(1,100);",
              "    if(tempInt>1 && tempInt<=20)  tItem=CreateNodes(Rnd(10,40), 1);",
              "    else if(tempInt>20 && tempInt<=35) tItem=CreateQuestItem('Remains_'+Rnd(14,18), Kling);",
              "    else if(tempInt>35 && tempInt<=50) tItem=CreateQuestItem('Remains_'+Rnd(0,9), Kling);",
              "    else if(tempInt>50 && tempInt<=75) {",
              "      tItem=ShipItems(tShip, Rnd(1, ShipItems(tShip)-1));//выбирается одна из оборудок корабля",
              "      GetItemFromShip(tShip, FindItemInShip(tShip, tItem));//изымаем оборудку из трюма корабля",
              "    }",
              "    else tItem=CreateDropMM(50, 100);",
              "    ItemSubrace(tItem, 1);",
              "    ConvertToABShip(tShip, 0, 100, 100, '', tItem);",
              "    ShipDestroy(tShip);",
              "  }",
              "  //Штип",
              "  subtypeShips=domTotal/1;",
              "  domTotal=domTotal-subtypeShips*1;",
              "  for(i=1; i<=subtypeShips; i=i+1) {",
              "    tItem=0;",
              "    tShip=BuyDomikExtremal(tPlanet, 5);//Штип",
              "    tempInt=Rnd(1,100);",
              "    if(tempInt>1 && tempInt<=30)  tItem=CreateNodes(Rnd(5,20), 1);",
              "    else if(tempInt>30 && tempInt<=60) tItem=CreateQuestItem('Remains_'+Rnd(0,9), Kling);",
              "    else {",
              "      tItem=ShipItems(tShip, Rnd(1,ShipItems(tShip)-1));//выбирается одна из оборудок корабля",
              "      GetItemFromShip(tShip, FindItemInShip(tShip, tItem));//изымаем оборудку из трюма корабля",
              "    }",
              "    ItemSubrace(tItem, 1);",
              "    ConvertToABShip(tShip, 0, 100, 100, '', tItem);",
              "    ShipDestroy(tShip);",
              "  }",
              "}",
              "//Функция создания ММ для добавления в дроп с АБ.",
              "//Параметры - начальный и конечный приоритеты микромодулей для функции BuildListOfMMByPriority();",
              "//Возвращает указатель на созданный микромодуль.",
              "function CreateDropMM(dword beginPriority, dword endPriority) {",
              "  int module; str tStr;",
              "  BuildListOfMMByPriority(tempArr, beginPriority, endPriority, 1);",
              "  for(module=ArrayDim(tempArr)-1; module>=0; module=module-1) {",
              "    if(module==-1) break;",
              "    tStr='';",
              "    tStr=CT('MicroModuls.'+BonusNumInCfg(tempArr[module])+'.Owner');",
              "    if(tStr=='' || tStr=='Any' || findsubstr(tStr,'Kling')==0 || findsubstr(tStr,'Keller')==0) continue;//ищем в Owner: отсутствует, Any, Kling, Keller",
              "    else ArrayDelete(tempArr, module);//удаляем элемент",
              "  }",
              "  if(ArrayDim(tempArr)-1>0) {",
              "    module=Rnd(0, ArrayDim(tempArr)-1);",
              "    module=CreateMM(tempArr[module]);//аргумент - номер бонуса",
              "    ItemOwner(module, Kling);",
              "  }",
              "  ArrayClear(tempArr);",
              "  result=module;",
              "}",
              "//Функция создания артефакта для добавления в дроп с АБ. Артефакты создаются с учетом уже имеющихся у игрока.",
              "//Возвращает указатель на созданный артефакт.",
              "function CreateDropArt() {",
              "  dword artifact; int i, j;",
              "  for(i=1; i<ArrayDim(artsArr); i=i+1) ArrayAdd(tempArr, artsArr[i]); //Копируем все артефакты в массив",
              "  for(i=0; i<ShipArts(Player()); i=i+1) { //Убираем из выдачи имеющиеся у игрока",
              "    artifact=ShipArts(Player(), i);",
              "    for(j=1; j<ArrayDim(tempArr); j=j+1) {",
              "      if(ItemType(artifact)==tempArr[j]) ArrayDelete(tempArr,j);",
              "    } //Выдаем один случайный",
              "    if(ArrayDim(tempArr)>1) artifact=CreateArt(tempArr[Rnd(1,ArrayDim(tempArr)-1)], Kling);",
              "    else artifact=CreateArt(artsArr[Rnd(1,ArrayDim(tempArr)-1)], Kling);",
              "  }",
              "  ArrayClear(tempArr);",
              "  result=artifact;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  510,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  13,
          "Total.Lines":  43,
          "Code.Type":  "Turn",
          "Code":          
          [
              "curInfo=ShipFindCustomShipInfoByType(CurShip, 'DomInfoBH');",
              "holeIndex=ShipCustomShipInfoData(CurShip, curInfo, 1);",
              "for(i=0; i<StarHoles(ShipStar(CurShip)); i=i+1) {",
              "  curHole=StarHoles(ShipStar(CurShip), i);",
              "  infoData1=holesArr[holeIndex,0]; //Id нужной ЧД",
              "  if(Id(curHole)==infoData1) break;",
              "  else curHole=0;",
              "}",
              "if(!OrderLock(CurShip)) OrderLock(CurShip, 1);",
              "if(GetShipPlanet(CurShip)) OrderTakeOff(CurShip);",
              "else if(ShipInNormalSpace(CurShip)) {",
              "  infoData2=holesArr[holeIndex,1]; //Id-1 системы назначения",
              "  infoData3=holesArr[holeIndex,2]; //Id-1 системы отправления",
              "  if(curHole) { //Нужная ЧД существует",
              "    if(ShipInHole(Player())) {",
              "      if(Id(ShipOrderObj(Player()))==infoData1) {//Игрок в нужной ЧД",
              "        if(OrderLock(CurShip)) OrderLock(CurShip, 0); //Выводим корабли из стейта",
              "        OrderNone(CurShip);",
              "        ShipDeleteCustomShipInfo(CurShip, curInfo);",
              "        ShipOut(CurShip);",
              "      }",
              "    }",
              "    if(ShipStar(CurShip)==GalaxyStar(infoData3)) OrderJumpHole(CurShip, curHole); //Прыгаем в ЧД",
              "    else if(ShipStar(CurShip)==GalaxyStar(infoData2)) {//Выводим корабль из стейта, если прилетели",
              "      if(OrderLock(CurShip)) OrderLock(CurShip, 0);",
              "      ShipDeleteCustomShipInfo(CurShip, curInfo);",
              "      ShipOut(CurShip);",
              "    }",
              "  }",
              "  else { //Выводим корабль из стейта, если ЧД пропала (игрок закрыл)",
              "    if(OrderLock(CurShip)) OrderLock(CurShip, 0);",
              "    OrderNone(CurShip);",
              "    ShipDeleteCustomShipInfo(CurShip, curInfo);",
              "    ShipOut(CurShip);",
              "  }",
              "}",
              "else if(ShipInHole(CurShip)) {",
              "  if(!ShipCustomShipInfoData(CurShip, curInfo, 2)) {  //Проверяем ЧД-статус корабля",
              "    infoData4=holesArr[holeIndex,3];  //Таймер атаки",
              "    ShipCustomShipInfoData(CurShip, curInfo, 2, 1); //Меняем ЧД-статус",
              "    ShipOrderData1(CurShip, (infoData4-CurTurn())-Rnd(0,2)); //Вылет по таймеру",
              "  }",
              "}"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "InitPlanet",
          "Pos.x":  230,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  1,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  160,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  4,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "InitStar",
          "Pos.x":  160,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  0,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  510,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  35,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  510,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  36,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  510,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  37,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  510,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  38,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "PlayerState",
          "Pos.x":  230,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  3,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "JumpHoleG1",
          "Pos.x":  420,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  12,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "JumpHoleG2",
          "Pos.x":  420,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  28,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "JumpHoleG3",
          "Pos.x":  420,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  30,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "JumpHoleG4",
          "Pos.x":  420,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  32,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "JumpHoleG5",
          "Pos.x":  420,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  34,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  630,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  7,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "attackTimer",
          "Pos.x":  810,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  8,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "curHole",
          "Pos.x":  710,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  9,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tempArr",
          "Pos.x":  550,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  14,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "invadersNum",
          "Pos.x":  810,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  15,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "infoData1",
          "Pos.x":  920,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  16,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "infoData2",
          "Pos.x":  920,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  17,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "infoData3",
          "Pos.x":  920,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  18,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "curInfo",
          "Pos.x":  710,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  19,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "invadersInWave",
          "Pos.x":  810,
          "Pos.y":  300,
          "Parent":  -1,
          "#":  20,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tRnd",
          "Pos.x":  630,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  21,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "holesArr",
          "Pos.x":  550,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  22,
          "Var.Type":  "Unknown",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "holeIndex",
          "Pos.x":  630,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  23,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "infoData4",
          "Pos.x":  920,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  24,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "flagAB",
          "Pos.x":  810,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  25,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  660,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  26,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "newHoleTimer",
          "Pos.x":  810,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  39,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "abCount",
          "Pos.x":  710,
          "Pos.y":  300,
          "Parent":  -1,
          "#":  40,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "domArr",
          "Pos.x":  550,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  41,
          "Var.Type":  "Unknown",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "curSystem",
          "Pos.x":  710,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  42,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "lastSystemId",
          "Pos.x":  710,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  43,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "artsArr",
          "Pos.x":  550,
          "Pos.y":  300,
          "Parent":  -1,
          "#":  44,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "reserveGroup",
          "Pos.x":  1000,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  45,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "reserveArr",
          "Pos.x":  550,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  46,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "reserveTimer",
          "Pos.x":  1000,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  47,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "starDestroyerHoleId",
          "Pos.x":  710,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  48,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "starDestroyerHoleTurn",
          "Pos.x":  710,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  49,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  4,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  3,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  11,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  11,
      "End":  12,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  27,
      "End":  28,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  27,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  29,
      "End":  30,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  31,
      "End":  32,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  33,
      "End":  34,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  29,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  31,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  33,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  30,
      "End":  13,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  34,
      "End":  38,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  32,
      "End":  37,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  38,
      "End":  13,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  37,
      "End":  13,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  36,
      "End":  13,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  35,
      "End":  13,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  28,
      "End":  36,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  12,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "BlockPar.EC.Total.Strings":  0,
  "BlockPar.EC":  
  [
  
  ]
}