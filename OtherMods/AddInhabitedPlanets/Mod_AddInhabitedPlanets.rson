{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -315,
  "ViewPos.y":  -255,
  "ScriptName":  "Mod_AddInhabitedPlanets",
  "ScriptFileOut":  "H:\\Build\\Mod_AddInhabitedPlanets.scr",
  "ScriptTextOut":  "H:\\Build\\Mod_AddInhabitedPlanets.txt",
  "GraphPoint.Count":  17,
  "GraphLink.Count":  5,
  "GraphRectText.Count":  0,
  "Variables.Count":  10,
  "Stars.Count":  2,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  1,
  "Groups.Count":  1,
  "Places.Count":  0,
  "Items.Count":  0,
  "Ethers.Count":  0,
  "Dialogs.Count":  0,
  "DialogMessages.Count":  0,
  "DialogAnswers.Count":  0,
  "Operations.Count":  1,
  "Statements.Count":  0,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "InitGroup",
          "Pos.x":  190,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  5,
          "Owner":  64,
          "Group.Type":  1048576,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  270,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  3,
          "Total.Lines":  202,
          "Code.Type":  "Init",
          "Code":          
          [
              "// сделать зависимость экономики от ТН",
              "int i, j, k;",
              "dword star, planet, planetCount;",
              "dword totalPlanets=20; //Кол-во создаваемых планет",
              "str planetName;",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.1')); //Гурт",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.7')); //Кайо",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.2')); //Хиша",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.6')); //Таолис",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.3')); //Карагон",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.8')); //Оника",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.4')); //Зондур",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.9')); //Хоот",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.5')); //Атланта",
              "ArrayAdd(raceSectorsArray, CT('Constellations.Name.10')); //Фаави",
              "formNamesArray('Maloc', malocNamesArray);",
              "formNamesArray('Peleng', pelengNamesArray);",
              "formNamesArray('People', peopleNamesArray);",
              "formNamesArray('Fei', feiNamesArray);",
              "formNamesArray('Gaal', gaalNamesArray);",
              "for(i=0; i<GalaxyStars(); i=i+1) {",
              "    star=GalaxyStar(i);",
              "    if(StarToCon(star)==StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "    for(j=0; j<StarPlanets(star); j=j+1) {",
              "        planet=StarPlanets(star, j);",
              "        if(PlanetOwner(planet)!=None) {",
              "            planetCount=planetCount+1;",
              "            planetName=Name(planet);",
              "            if(PlanetRace(planet)==Maloc) {",
              "                for(k=1; k<ArrayDim(malocNamesArray); k=k+1) {",
              "                    if(planetName==malocNamesArray[k]) {",
              "                        ArrayDelete(malocNamesArray, k);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "            else if(PlanetRace(planet)==Peleng) {",
              "                for(k=1; k<ArrayDim(pelengNamesArray); k=k+1) {",
              "                    if(planetName==pelengNamesArray[k]) {",
              "                        ArrayDelete(pelengNamesArray, k);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "            else if(PlanetRace(planet)==People) {",
              "                for(k=1; k<ArrayDim(peopleNamesArray); k=k+1) {",
              "                    if(planetName==peopleNamesArray[k]) {",
              "                        ArrayDelete(peopleNamesArray, k);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "            else if(PlanetRace(planet)==Fei) {",
              "                for(k=1; k<ArrayDim(feiNamesArray); k=k+1) {",
              "                    if(planetName==feiNamesArray[k]) {",
              "                        ArrayDelete(feiNamesArray, k);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "            else {",
              "                for(k=1; k<ArrayDim(gaalNamesArray); k=k+1) {",
              "                    if(planetName==gaalNamesArray[k]) {",
              "                        ArrayDelete(gaalNamesArray, k);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    if(planetCount==1) ArrayAdd(onePlanetArray, Id(star)-1);",
              "    else if(planetCount==2) ArrayAdd(twoPlanetsArray, Id(star)-1);",
              "    else if(planetCount==3) ArrayAdd(threePlanetsArray, Id(star)-1);",
              "    planetCount=0;",
              "}",
              "planetCount=ArrayDim(onePlanetArray)-1+(2*(ArrayDim(twoPlanetsArray)-1))+(3*(ArrayDim(threePlanetsArray)-1));",
              "totalPlanets=max(totalPlanets, (ArrayDim(onePlanetArray)-1)); //Если систем с одной планетой > 20",
              "totalPlanets=min(200-planetCount, totalPlanets); //Но более 200 заселенных планет на Галактику",
              "for(i=1; i<ArrayDim(onePlanetArray); i=i+1) {",
              "    star=GalaxyStar(onePlanetArray[i]);",
              "    planet=CreateInhabitedPlanet(star);",
              "    ArrayAdd(twoPlanetsArray, Id(star)-1);",
              "}",
              "ArrayDelete(twoPlanetsArray, 0); //Нулевой элемент будет перемешиваться, если его не удалить",
              "ArrayRandomize(10, twoPlanetsArray);",
              "j=totalPlanets-(ArrayDim(onePlanetArray)-1);",
              "for(i=0; i<j; i=i+1) {",
              "    star=GalaxyStar(twoPlanetsArray[i]);",
              "    planet=CreateInhabitedPlanet(star);",
              "}",
              "//Функция создания обитаемой планеты. Параметр - указатель на звезду, где будет создана планета.",
              "//Возвращает указатель на созданную планету.",
              "function CreateInhabitedPlanet(dword star) {",
              "    dword planet, tempRadius;",
              "    int tRnd, i;",
              "    str conName;",
              "    //Расчет орбиты",
              "    tRnd=Rnd(0, StarPlanets(star)); //Номер новой планеты в списке планет системы",
              "    if(tRnd==StarPlanets(star)) planet=CreatePlanet(star);",
              "    else {",
              "        tempRadius=PlanetOrbitRadius(StarPlanets(star, tRnd));",
              "        for(i=tRnd; i<StarPlanets(star); i=i+1) PlanetOrbitRadius(StarPlanets(star, i), PlanetOrbitRadius(StarPlanets(star, i))+400+round(Rnd(0, 100), 10));",
              "        planet=CreatePlanet(star, tempRadius);",
              "    }",
              "    conName=ConName(StarToCon(star));",
              "    //Определение проживающей на планете расы, с учетом расовых секторов",
              "    if(conName==raceSectorsArray[1] || conName==raceSectorsArray[2]) SetPlanetRace(planet, Maloc);",
              "    else if(conName==raceSectorsArray[3] || conName==raceSectorsArray[4]) SetPlanetRace(planet, Peleng);",
              "    else if(conName==raceSectorsArray[5] || conName==raceSectorsArray[6]) SetPlanetRace(planet, People);",
              "    else if(conName==raceSectorsArray[7] || conName==raceSectorsArray[8]) SetPlanetRace(planet, Fei);",
              "    else if(conName==raceSectorsArray[9] || conName==raceSectorsArray[10]) SetPlanetRace(planet, Gaal);",
              "    else SetPlanetRace(planet, -1);",
              "    if(!StarOwner(star)) PlanetOwner(planet, PlanetRace(planet));",
              "    else if(StarOwner(star)==1) PlanetOwner(planet, Kling);",
              "    else PlanetOwner(planet, PirateClan);",
              "    //Стартовое отношение",
              "    if(PlanetOwner(planet)<Kling) RelationToRanger(planet, Player(), GlobalRelationsPlanets(Player(), 0, int(exp(ln(2)*PlanetOwner(planet)))));",
              "    //Население",
              "    if(PlanetSize(planet)==60) PlanetPopulation(planet, 100000);",
              "    else if(PlanetSize(planet)==70) PlanetPopulation(planet, 225000);",
              "    else if(PlanetSize(planet)==80) PlanetPopulation(planet, 450000);",
              "    else if(PlanetSize(planet)==90) PlanetPopulation(planet, 700000);",
              "    else PlanetPopulation(planet, 1000000);",
              "    PlanetPopulation(planet, PlanetPopulation(planet)+1000*Rnd(-10, 25));",
              "    //Экономика с учетом ТН",
              "    tRnd=Rnd(1, 100); //Сделать зависимость от ТН",
              "    if(tRnd<34) PlanetEco(planet, 0);",
              "    else if(tRnd<67) PlanetEco(planet, 1);",
              "    else PlanetEco(planet, 2);",
              "    //Название планеты",
              "    if(PlanetRace(planet)==Maloc) {",
              "        tRnd=Rnd(1, ArrayDim(malocNamesArray)-1);",
              "        SetName(planet, malocNamesArray[tRnd]);",
              "        ArrayDelete(malocNamesArray, tRnd);",
              "    }",
              "    else if(PlanetRace(planet)==Peleng) {",
              "        tRnd=Rnd(1, ArrayDim(pelengNamesArray)-1);",
              "        SetName(planet, pelengNamesArray[tRnd]);",
              "        ArrayDelete(pelengNamesArray, tRnd);",
              "    }",
              "    else if(PlanetRace(planet)==People) {",
              "        tRnd=Rnd(1, ArrayDim(peopleNamesArray)-1);",
              "        SetName(planet, peopleNamesArray[tRnd]);",
              "        ArrayDelete(peopleNamesArray, tRnd);",
              "    }",
              "    else if(PlanetRace(planet)==Fei) {",
              "        tRnd=Rnd(1, ArrayDim(feiNamesArray)-1);",
              "        SetName(planet, feiNamesArray[tRnd]);",
              "        ArrayDelete(feiNamesArray, tRnd);",
              "    }",
              "    else {",
              "        tRnd=Rnd(1, ArrayDim(gaalNamesArray)-1);",
              "        SetName(planet, gaalNamesArray[tRnd]);",
              "        ArrayDelete(gaalNamesArray, tRnd);",
              "    }",
              "    //Стартовый бонус к технологиям, зависящий от расы",
              "    for(i=0; i<=10; i=i+1) ArrayAdd(tempArr, i);",
              "    for(i=0; i<=PlanetRace(planet); i=i+1) {",
              "        tRnd=Rnd(1, ArrayDim(tempArr)-1);",
              "        PlanetInventionLevel(planet, tempArr[tRnd], PlanetInventionLevel(planet, tempArr[tRnd])+1);",
              "        ArrayDelete(tempArr, tRnd);",
              "    }",
              "    ArrayClear(tempArr);",
              "    result=planet;",
              "}",
              "//Функция определения расы на планете. Первый параметр - указатель на планету.",
              "//Второй параметр - предпочитаемая раса или -1.",
              "function SetPlanetRace(dword planet, int race) {",
              "    dword star, tempPlanet, flag;",
              "    star=PlanetToStar(planet);",
              "    for(int i=0; i<StarPlanets(star); i=i+1) {",
              "        tempPlanet=StarPlanets(star, i);",
              "        if(PlanetOwner(tempPlanet)!=None) ArrayAdd(tempArr, tempPlanet);",
              "    }",
              "    if(ArrayDim(tempArr)==2) flag=0; //Одна заселенная планета",
              "    else flag=1; //Две или больше",
              "    if(~race && Rnd(1, 100)<=60) PlanetRace(planet, race);",
              "    else {",
              "        if(!flag) PlanetRace(planet, Rnd(Maloc, Gaal));",
              "        else PlanetRace(planet, PlanetRace(tempArr[Rnd(1, ArrayDim(tempArr)-1)]));",
              "    }",
              "    ArrayClear(tempArr);",
              "}",
              "//Функция заполнения массива расовых названий из ланга. Первый параметр - название расы строкой.",
              "//Второй параметр - указатель на массив.",
              "function formNamesArray(str nameStr, ref nameArray) {",
              "    int i=1;",
              "    while(i) {",
              "        str planetName;",
              "        if(nameStr=='Fei') { //Костыль из-за того, что в ванильном ланге фэянам недодали два названия планет",
              "            if(CT('PlanetName.Fei.33')=='') {",
              "                if(i==33) i=35;",
              "            }",
              "        }",
              "        if(i<10) planetName=CT('PlanetName.'+nameStr+'.0'+i);",
              "        else planetName=CT('PlanetName.'+nameStr+'.'+i);",
              "        if(planetName) ArrayAdd(nameArray, planetName);",
              "        else break;",
              "        i=i+1;",
              "    }",
              "}",
              "AllShipOut();"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "InitPlanet",
          "Pos.x":  190,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  1,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  4,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "InitStar",
          "Pos.x":  190,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  0,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        },
        {
          "Type":  "TStar",
          "Name":  "PlayerStar",
          "Pos.x":  90,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  6,
          "Constellation":  0,
          "Priority":  1,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "InitState",
          "Pos.x":  190,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  2,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "onePlanetArray",
          "Pos.x":  310,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  7,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "twoPlanetsArray",
          "Pos.x":  310,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  8,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "threePlanetsArray",
          "Pos.x":  310,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  9,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "malocNamesArray",
          "Pos.x":  430,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  10,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "pelengNamesArray",
          "Pos.x":  430,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  11,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "peopleNamesArray",
          "Pos.x":  430,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  12,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "feiNamesArray",
          "Pos.x":  430,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  13,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "gaalNamesArray",
          "Pos.x":  430,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  14,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "raceSectorsArray",
          "Pos.x":  310,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  15,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tempArr",
          "Pos.x":  310,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  16,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  5,
      "End":  2,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  5,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  4,
      "End":  6,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TStarLink",
      "Begin":  6,
      "End":  0,
      "Nom":  0,
      "Arrow":  false,
      "DistMin":  0,
      "DistMax":  150,
      "Hole":  false    
    }  
  ],
  "BlockPar.EC.Total.Strings":  0,
  "BlockPar.EC":  
  [
  
  ]
}